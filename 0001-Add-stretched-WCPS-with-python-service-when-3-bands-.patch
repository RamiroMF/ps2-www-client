From bd192481a479d8cadecbb40b23017a4b08a32e7e Mon Sep 17 00:00:00 2001
From: Bang Pham Huu <bphamhuu@jacobs-university.de>
Date: Tue, 31 May 2016 21:32:32 +0300
Subject: [PATCH] Add stretched WCPS with python service when 3 bands are
 custom WCPS queries

---
 html/modules/landings/landings.js             |   9 +-
 html/modules/rgb-combinator/rgb-combinator.js |  20 +++-
 python/README                                 |   6 +
 python/start.py                               |  46 ++++++++
 python/stretch.py                             | 162 ++++++++++++++++++++++++++
 5 files changed, 241 insertions(+), 2 deletions(-)
 create mode 100644 python/README
 create mode 100644 python/start.py
 create mode 100644 python/stretch.py

diff --git a/html/modules/landings/landings.js b/html/modules/landings/landings.js
index 7a5d2b8..43b1882 100644
--- a/html/modules/landings/landings.js
+++ b/html/modules/landings/landings.js
@@ -9,6 +9,7 @@
 
 ps2EndPoint = "http://access.planetserver.eu/";
 ps2WCPSEndPoint = "http://access.planetserver.eu:8080/rasdaman/ows?service=WCS&version=2.0.1&request=ProcessCoverages&query=";
+ps2StretchWCPSEndPoint = "http://localhost:8090/python?wcpsQuery=";
 
 checkedFootPrintsArray = []; // array of footprints that user choosed
 
@@ -408,10 +409,16 @@ requirejs(['../../config/config',
         }
 
         // this function will load a RGB combination image from rgbcombination.js to selected footprint from selected comboBox
-        window.loadRGBCombinations = function(WCPSLoadImage, coverageID) {
+        window.loadRGBCombinations = function(WCPSLoadImage, coverageID, stretch) {
+            // If stretch is true then need to use Python stretch.py to stretch
             //alert(WCPSLoadImage);
             WCPSLoadImage = ps2WCPSEndPoint + WCPSLoadImage;
 
+            if(stretch) {
+                // Use Python web service to stretch WCPS queries
+                WCPSLoadImage = ps2StretchWCPSEndPoint + WCPSLoadImage;
+            }
+
             for (var i = 0; i < checkedFootPrintsArray.length; i++) {
                 var maxlong;
                 var minlong;
diff --git a/html/modules/rgb-combinator/rgb-combinator.js b/html/modules/rgb-combinator/rgb-combinator.js
index d4f99ed..0b37166 100644
--- a/html/modules/rgb-combinator/rgb-combinator.js
+++ b/html/modules/rgb-combinator/rgb-combinator.js
@@ -4,6 +4,10 @@ var wcpsQueriesJSON = ""; // array to store wcpsQueries from server
 var DEFAULT_BANDS = 438;
 var SUBMENU_BANDS = 73;
 
+// when combine with WCPS custom queries will need to stretch it with Python web service
+var stretch = false;
+var isAllBandsCustomWCPSQueries = 0;
+
 var availableWCPSQueries = []; // store all the WCPS queries from JSON
 
 var selectedFootPrintsArray = []; // store the selected footprints from dropDownSelectedFootPrints
@@ -702,6 +706,7 @@ function getBandWCPSQuery(simpleBandTemplate, targetName, bandName) {
                 if (bandName.toLowerCase() === subMenuItems[j].name.toLowerCase()) {
 
                     isSuccessRGBCombination = true;
+                    isAllBandsCustomWCPSQueries += 1;
                     return (targetNameSubString + ":" + subMenuItems[j].query);
                 }
             }
@@ -718,6 +723,11 @@ function getBandWCPSQuery(simpleBandTemplate, targetName, bandName) {
 // button submit RGBCombinations handle
 $("#btnSubmitRGBCombination").click(function(e) {
     e.preventDefault();
+    e.stopPropagation();
+
+
+    // If 1 of band is custom WCPS query then need to use stretch service
+    isAllBandsCustomWCPSQueries = 0;
 
     // not choose any selected footprint
     if (selectedFootPrintsArray.length === 0) {
@@ -789,6 +799,7 @@ $("#btnSubmitRGBCombination").click(function(e) {
         }
 
         WCPS_TEMPLATE = replaceAll(WCPS_TEMPLATE, "$RGB_BANDS", rgbCombination);
+        // When combine with custom WCPS queries it will need to stretch all bands (first: 0 - 255 then to mean and standard deviation)
 
         // then call the function to load the image on selected footprint from landing.js
         if(isSuccessRGBCombination === true) {
@@ -835,7 +846,14 @@ $("#btnSubmitRGBCombination").click(function(e) {
 
                     // replace $COVERAGE_ID with selected coverageID and load WCPS combination on checked footprint
                     WCPS_TEMPLATE = replaceAll(WCPS_TEMPLATE, "$COVERAGE_ID", selectedFootPrintsArray[i].coverageID.toLowerCase());
-                    loadRGBCombinations(WCPS_TEMPLATE, selectedFootPrintsArray[i].coverageID.toLowerCase());
+                    if(isAllBandsCustomWCPSQueries === 3) {
+                        // current encode in PNG has problem when gdalinfo does not ignore NODATA ( = 0 ) then need to use tiff as it will 
+                        // calculate correctly
+                        stretch = true;
+                        WCPS_TEMPLATE = WCPS_TEMPLATE.replace("png", "tiff");
+                        console.log("Stretched WCPS query: " + WCPS_TEMPLATE);
+                    }
+                    loadRGBCombinations(WCPS_TEMPLATE, selectedFootPrintsArray[i].coverageID.toLowerCase(), stretch);
                 }                
             }
         }
diff --git a/python/README b/python/README
new file mode 100644
index 0000000..59c1e5f
--- /dev/null
+++ b/python/README
@@ -0,0 +1,6 @@
+Run python start.py in terminal, it will start a webserver with port 8090
+then can request a WCPS with stretch value such as
+
+with WCPS query already stretch between 0 - 255
+
+http://localhost:8090/stretch?wcpsQuery=http://access.planetserver.eu:8080/rasdaman/ows?service=WCS&version=2.0.1&request=ProcessCoverages&query=for%20data%20in%20(%20frt0000b385_07_if164l_trr3%20)%20return%20encode(%20{%20red:%20(int)%20(%20255%20/%20(%20max((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20-%20min((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20))%20*%20(%20((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20-%20min((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20);%20green:%20(int)(%20255%20/%20(%20max((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20-%20min((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20))%20*%20(%20((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20-%20min((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20);%20blue:%20(int)(%20255%20/%20(%20max((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20-%20min((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20))%20*%20(%20((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20-%20min((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20);%20alpha:%20(data.band_100%20!=%2065535)%20*%20255%20},%20%22png%22,%20%22nodata=null%22)
diff --git a/python/start.py b/python/start.py
new file mode 100644
index 0000000..eb766d0
--- /dev/null
+++ b/python/start.py
@@ -0,0 +1,46 @@
+#!/usr/bin/python
+import os
+import subprocess
+import re
+from stretch import *
+from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
+
+# This port is for python
+PORT_NUMBER = 8090
+
+# Kill old webserver before starting new server
+print "Kill process on port {0}".format(PORT_NUMBER)
+subprocess.call("fuser -k {0}/tcp".format(PORT_NUMBER), shell=True)
+print "Start simpleHTTPServer for stretching WCPS query. Use Ctrl + C to stop server."
+
+#This class will handles any incoming request from
+#the browser 
+class PythonWebHandler(BaseHTTPRequestHandler):
+	
+	#Handler for the GET requests
+	def do_GET(self):
+		self.send_response(200)
+		self.send_header('Content-type','image/png')
+		self.send_header("Access-Control-Allow-Origin", "*")
+		self.end_headers()
+		# Get the result from WCPS query and return the stretched image to web
+		stretchHandler = StretchHandler(None, "");
+		try:
+			uri = stretchHandler.parseURI(self.path);
+			self.wfile.write(uri);
+		except:
+			print ""
+		return
+
+try:
+	#Create a web server and define the handler to manage the
+	#incoming request
+	server = HTTPServer(('', PORT_NUMBER), PythonWebHandler)
+	print 'Started httpserver on port', PORT_NUMBER
+	
+	#Wait forever for incoming htto requests
+	server.serve_forever()
+
+except KeyboardInterrupt:
+	print '^C received, shutting down the web server'
+	server.socket.close()
diff --git a/python/stretch.py b/python/stretch.py
new file mode 100644
index 0000000..6d74c13
--- /dev/null
+++ b/python/stretch.py
@@ -0,0 +1,162 @@
+#!/usr/bin/python
+import urllib2
+import sys
+import os
+import collections
+from PIL import Image
+from StringIO import StringIO
+from osgeo.gdalconst import *
+from osgeo import gdal
+from uuid import uuid4
+
+class StretchHandler:
+	def __init__(self, image, wcpsQuery):
+		self.image = image;
+		self.wcpsQuery = wcpsQuery;
+		self.bandStats = collections.OrderedDict()
+		self.bandStretchValues = collections.OrderedDict()
+		self.totalBand = 0;
+		self.dataSet = None;
+		self.outputDirectory = os.path.dirname(os.path.realpath(__file__)) + "/tmp/";
+		self.outputPNGFileName = "";
+		
+		# array values after been stretched
+		self.stretchArray = collections.OrderedDict();
+			
+		# return the PNG as byte arrays to stream
+		self.output = None;
+
+	# Write the stretched image to file
+	def createOutputFile(self, totalBand, prefix):	
+		rows = self.dataSet.RasterXSize
+		cols = self.dataSet.RasterYSize
+
+		# it will create a temporary tiff file then png file
+		tmpFileTiff = self.outputDirectory +  prefix + "_" + uuid4().get_hex() + ".tiff"
+		self.outputPNGFileName = self.outputDirectory + prefix + "_" + uuid4().get_hex() + ".png"
+
+		tiff_driver = gdal.GetDriverByName('GTiff')
+    		tiff_outRaster = tiff_driver.Create(tmpFileTiff, rows, cols, totalBand, gdal.GDT_Byte)
+
+		bandNumber = 1;
+		for i in range ( self.totalBand ):
+			tiff_outband = tiff_outRaster.GetRasterBand(bandNumber)
+			tiff_outband.WriteArray( self.stretchArray[ "b" + str(bandNumber) ] )
+			tiff_outband.SetNoDataValue(0)
+			tiff_outband.FlushCache()
+			bandNumber += 1
+
+		# Remove tiff file
+		os.remove(tmpFileTiff)		
+	
+		png_driver = gdal.GetDriverByName("PNG")
+		png_driver.CreateCopy( self.outputPNGFileName, tiff_outRaster, 0 )
+		os.remove( self.outputPNGFileName  + ".aux.xml");
+
+		# Read the output PNG and return to client
+		image = open(self.outputPNGFileName, "rb")
+		self.output = image.read()
+		image.close()
+
+		# Remove the PNG file after reading the content
+		os.remove(self.outputPNGFileName)
+
+
+	# Stretch image's bands with new range
+	def stretchImage(self):
+
+		print "Total band: ", self.totalBand
+		bandNumber = 1;
+		for band in range( self.totalBand ):			
+			band = self.dataSet.GetRasterBand(bandNumber);
+			array = band.ReadAsArray()
+
+			if bandNumber != 4:
+				# Stretch with new range for each band
+				newMin = self.bandStretchValues["b" + str(bandNumber)][0]
+				newMax = self.bandStretchValues["b" + str(bandNumber)][1]			
+				percent = 255 / (newMax - newMin)
+				array = (array - newMin) * percent
+
+			# Add all stretched array and write to a new file
+			self.stretchArray["b" + str(bandNumber)] = array							
+			bandNumber += 1;
+
+		# also write to file
+		self.createOutputFile(self.totalBand, "rgb")
+
+	# Stretch PNG image with the statistic values for each band
+	def calculateStretch(self):
+
+		# From b1 - b3
+		if self.bandStats["b1"] is not None:
+			mean = self.bandStats["b1"][0]
+			staDev = self.bandStats["b1"][1]
+			newMax = int(mean + staDev)
+			newMin = int(mean + 0.5 * staDev)
+			self.bandStretchValues["b1"] = [newMin, newMax]
+
+		if self.bandStats["b2"] is not None:
+			mean = self.bandStats["b2"][0]
+			staDev = self.bandStats["b2"][1]
+			newMax = int(mean + 0.8 * staDev)
+			newMin = int(mean + 0.65 * staDev)
+			self.bandStretchValues["b2"] = [newMin, newMax]
+
+		if self.bandStats["b3"] is not None:
+			mean = self.bandStats["b3"][0]
+			staDev = self.bandStats["b3"][1]
+			newMax = int(mean + 0.85 * staDev)
+			newMin = int(mean + 0.65 * staDev)
+			self.bandStretchValues["b3"] = [newMin, newMax]
+
+		print self.bandStretchValues
+		self.stretchImage()
+
+	# Get WCPS query (localhost:8090/python/stretch?wcpsQuery=WCPS_QUERY
+	def parseURI(self, URI):
+		self.wcpsQuery = URI.partition("wcpsQuery=")[2];
+		request = urllib2.Request(self.wcpsQuery, headers={"Accept-Encoding": "gzip"})
+		response = urllib2.urlopen(request, timeout=30)
+
+		# handle with GDAL, get some information (it must use "/vsimem/" or it cannot read file)
+		mmap_name = "/vsimem/" + uuid4().get_hex()
+
+		# read file from data
+		gdal.FileFromMemBuffer(mmap_name, response.read())
+		self.dataSet = gdal.Open(mmap_name)
+
+		'''test = "/home/rasdaman/ows (1).png"
+		self.dataSet = gdal.Open(test)'''
+
+		self.totalBand = self.dataSet.RasterCount;
+		print "Raster band count: ", self.totalBand;
+
+		# calculate the min, max for each band
+		bandNumber = 1
+	
+		# Store the mean and standard deviation for each band		
+		for band in range( self.totalBand ):
+			print "Getting band: ", bandNumber
+		
+			# Get the statistic from band
+			band = self.dataSet.GetRasterBand(bandNumber)
+			if band is None:
+        			continue			
+			stats = band.GetStatistics( True, True )
+			
+			print "[ STATS ] =  Minimum=%.3f, Maximum=%.3f, Mean=%.3f, StdDev=%.3f" % ( stats[0], stats[1], stats[2], stats[3] )
+
+			# Add the band and values to bandStats
+			self.bandStats["b" + str(bandNumber)] = [ stats[2], stats[3] ]
+
+			bandNumber += 1
+		# Calculate the stretch values for each band
+		self.calculateStretch();
+
+		return self.output;
+# test
+#http://localhost:8090/stretch?wcpsQuery=http://access.planetserver.eu:8080/rasdaman/ows?service=WCS&version=2.0.1&request=ProcessCoverages&query=for%20data%20in%20(%20frt0000b385_07_if164l_trr3%20)%20return%20encode(%20{%20red:%20(int)%20(%20255%20/%20(%20max((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20-%20min((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20))%20*%20(%20((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20-%20min((1%20-%20((1%20-%20(0.607142857))*data.band_171*(data.band_171%20!=%2065535)%20+%20(0.607142857)*data.band_213*(data.band_213%20!=%2065535))/(data.band_197*(data.band_197%20!=%2065535))))%20);%20green:%20(int)(%20255%20/%20(%20max((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20-%20min((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20))%20*%20(%20((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20-%20min((1%20-%20((data.band_173*(data.band_173%20!=%2065535))%20/%20((1%20-%20(0.63125))%20*%20data.band_142*(data.band_142%20!=%2065535)%20+%20(0.63125)%20*%20data.band_191*(data.band_191%20!=%2065535)))))%20);%20blue:%20(int)(%20255%20/%20(%20max((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20-%20min((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20))%20*%20(%20((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20-%20min((0.5%20*%20(1%20-%20((data.band_142*(data.band_142%20!=%2065535))%20/%20((1%20-%20(0.36346516))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.36346516)%20*%20data.band_163*(data.band_163%20!=%2065535))))%20*%200.5%20*%20(1%20-%20((data.band_151*(data.band_151%20!=%2065535))%20/%20((1%20-%20(0.636167379))%20*%20data.band_130*(data.band_130%20!=%2065535)%20+%20(0.636167379)%20*%20data.band_163*(data.band_163%20!=%2065535))))))%20);%20alpha:%20(data.band_100%20!=%2065535)%20*%20255%20},%20%22png%22,%20%22nodata=null%22)
+#stretchHandle = StretchHandler("", "")
+#stretchHandle.stretchBand(1, 135, 173)
+#stretchHandle.parseURI("")
-- 
1.8.3.1

